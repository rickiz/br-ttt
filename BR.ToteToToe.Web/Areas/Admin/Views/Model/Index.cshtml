@using BR.ToteToToe.Web.Helpers
@using BR.ToteToToe.Web.Areas.Admin.ViewModels
@model ModelViewModel

@{
    ViewBag.Title = "Model";
}

@using(Html.BeginForm())
{
    @Html.ValidationSummary(false)
    <table width="100%">
        <tr>
            <td>
                <div class="form-group row">
                    @Html.Label("Category", new { @class = "col-sm-4 control-label text-info" })
                    <div class="col-sm-6">
                        @Html.DropDownListFor(model => model.CategoryID, Util.GetList(RefType.Category), new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.Label("Brand", new { @class = "col-sm-4 control-label text-info" })
                    <div class="col-sm-6">
                        @Html.DropDownListFor(model=>model.BrandName, Util.GetList(RefType.Brand), new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.Label("Model", new { @class = "col-sm-4 control-label text-info" })
                    <div class="col-sm-6">
                        @Html.DropDownListFor(model => model.ModelID, Util.GetList(RefType.Model), new { @class = "form-control" })
                    </div>
                </div>
            </td>
            <td>
                <div class="form-group row">
                    @Html.Label("Colour", new { @class = "col-sm-4 control-label text-info" })
                    <div class="col-sm-6">
                        @Html.DropDownListFor(model => model.ColourID, Util.GetList(RefType.Colour), new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.Label("Actual Colour", new { @class = "col-sm-4 control-label text-info" })
                    <div class="col-sm-6">
                        @Html.DropDownListFor(model=>model.ColourDescID, Util.GetList(RefType.ColourDesc), new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group row">
                    @Html.Label("Active", new { @class = "col-sm-4 control-label text-info" })
                    <div class="col-sm-6">
                        @Html.DropDownListFor(model => model.Active, Util.GetActiveList(), new { @class = "form-control" })
                    </div>
                </div> 
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <div class="form-group row">
                    <div class="col-sm-offset-2 col-sm-6">
                        <button type="submit" class="btn btn-primary" id="btnSearch">Search</button>
                    </div>
                </div>  
            </td>
        </tr>
    </table>
}

@if(Model.ModelDetails.Count>0)
{
    Html.Telerik().Grid(Model.ModelDetails)
        .Name("grdResult")
        .Columns(cols =>
        {
            cols.Bound(m => m.ModelColourDescID).Hidden();
            cols.Bound(m => m.ModelName).Title("Name");
            cols.Bound(m => m.CategoryName).Title("Category");
            cols.Bound(m => m.BrandName).Title("Brand");
            cols.Bound(m => m.ColourName).Title("Colour");
            cols.Bound(m => m.ColourDescName).Title("Actual Colour");
            cols.Bound(m => m.Active).Title("Active");
        })
        .DataBinding(dataBinding => dataBinding.Ajax().OperationMode(GridOperationMode.Client))
        .Pageable(paging => paging.PageSize(100))
        .Sortable()
        .Selectable()
        .ClientEvents(events => events.OnRowSelect("onRowSelected_grdResult"))
        .Render();        
}

@section scripts
{
    <script type="text/javascript">

        $(document).ready(function () {

            //ColourChange();

            //CategoryChange();
        });

        function onRowSelected_grdResult(e) {
            var modelColourDescID = e.row.cells[0].innerHTML;

            window.location.href = "/Admin/Model/Edit?id=" + modelColourDescID;
        }

        function ColourChange() {

            var colourID = $('#ColourID').val();
            var colourDescID = '@Model.ColourDescID';

            if (colourDescID == '') {
                colourDescID = '0';
            }

            var url = '@(Url.Content("~/Model/GetColourDescByColour"))';
            $.post(url, { colourID: parseInt(colourID), colourDescID: parseInt(colourDescID) }, function (data) {

                var select = $("#ColourDescID");
                select.empty();

                $.each(data, function (index, itemData) {
                    select.append($('<option/>', {
                        value: itemData.Value,
                        text: itemData.Text
                    }));
                });
            });
        }

        function CategoryChange() {

            var categoryID = $('#CategoryID').val();
            var brandName = '@Model.BrandName';

            var url = '@(Url.Content("~/Model/GetBrandByCategory"))';
            $.post(url, { categoryID: parseInt(categoryID), brandName: brandName }, function (data) {

                var select = $("#BrandName");
                select.empty();

                $.each(data, function (index, itemData) {
                    select.append($('<option/>', {
                        value: itemData.Value,
                        text: itemData.Text
                    }));
                });
            });
        }

    </script>
}